{"version":3,"sources":["components/NavBar.js","components/Banner.js","components/IconCard.js","App.js","serviceWorker.js","index.js"],"names":["style","text","textAlign","NavBar","props","react_default","a","createElement","className","title","status","currentScore","topScore","logoIcon","width","height","justifyContent","Banner","src","alt","IconCard","id","value","onClick","clickedPlayer","image","shuffleArray","array","counter","length","index","Math","floor","random","temp","App","state","result","clicked","Icons","gameOver","console","log","concat","_this","includes","resetGame","pointIncrease","push","setState","score","resetIconArray","points","newScramble","this","_this2","components_Banner","components_NavBar","map","icon","components_IconCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2pCAEMA,SAAQ,CACZC,KAAM,CACJC,UAAW,YAeAC,EAXA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,UAAQP,MAAOA,EAAMC,KAAMO,UAAU,UACnCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASC,MAAM,QAA7B,6BAA8DJ,EAAAC,EAAAC,cAAA,WAA9D,WACWH,EAAMM,OAAOL,EAAAC,EAAAC,cAAA,WADxB,UAEUH,EAAMO,aAFhB,IAE+B,IAF/B,cAGcP,EAAMQ,aCZpBZ,EAAQ,CACZa,SAAU,CACRC,MAAO,KACPC,OAAQ,IACRC,eAAgB,WAULC,EANA,kBACbZ,EAAAC,EAAAC,cAAA,WAASC,UAAU,UACjBH,EAAAC,EAAAC,cAAA,OAAKP,MAAOA,EAAMa,SAAUL,UAAU,WAAWU,IAAI,uDAAuDC,IAAI,aCArGC,EAVE,SAAAhB,GAAK,OACpBC,EAAAC,EAAAC,cAAA,WAASc,GAAIjB,EAAMiB,GAAIb,UAAU,WAAWc,MAAOlB,EAAMiB,GAAIE,QAAS,kBACtEnB,EAAMoB,cAAcpB,EAAMiB,MAExBhB,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACjBH,EAAAC,EAAAC,cAAA,OAAKW,IAAKd,EAAMqB,MAAOjB,UAAU,KAAKW,IAAI,wBCE1CO,SAAe,SAACC,GAGpB,IAFA,IAAIC,EAAUD,EAAME,OAEbD,EAAU,GAAG,CAElB,IAAIE,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,GAInCM,EAAOP,IAFXC,GAGAD,EAAMC,GAAWD,EAAMG,GACvBH,EAAMG,GAASI,EAEjB,OAAOP,IAuGMQ,6MAnGbC,MAAQ,CACNzB,aAAc,EACdC,SAAU,EACVyB,OAAQ,GACRC,QAAS,GACTC,QACAC,UAAU,KAWZhB,cAAgB,SAAAH,GACdoB,QAAQC,IAAR,4BAAAC,OAAwCtB,IACnCuB,EAAKR,MAAME,QAAQO,SAASxB,GAO/BuB,EAAKE,aANLF,EAAKG,gBACLH,EAAKR,MAAME,QAAQU,KAAK3B,GACxBuB,EAAKK,SAAS,CACZT,UAAU,QAShBO,cAAgB,WACd,IAAIG,EAAQN,EAAKR,MAAMzB,aAAe,EACtC8B,QAAQC,IAAR,gBAAAC,OAA4BO,IACxBA,IAAUN,EAAKR,MAAMG,MAAMV,OAC7Be,EAAKK,SAAS,CACZZ,OAAQ,yCACRzB,SAAUsC,EACVvC,aAAc,EACd2B,QAAS,GACTC,QACAC,UAAU,IAEHU,EAAQN,EAAKR,MAAMxB,SAC5BgC,EAAKK,SAAS,CACZrC,SAAUsC,EACVvC,aAAcuC,EACdb,OAAQ,6BAGVO,EAAKK,SAAS,CACZtC,aAAcuC,EACdb,OAAQ,aAGZO,EAAKO,oBAIPL,UAAY,WACVF,EAAKK,SAAS,CACZG,OAAQ,EACRzC,aAAc,EACdC,SAAUgC,EAAKR,MAAMxB,SACrByB,OAAQ,YACRC,QAAS,GACTC,QACAC,UAAU,IAEZC,QAAQC,IAAI,cAAeE,EAAKR,MAAMI,UACtCI,EAAKO,oBAIPA,eAAiB,WACf,IAAIE,EAAc3B,EAAaa,GAC/BK,EAAKK,SAAS,CAAEV,MAAOc,wFAjEvBC,KAAKL,SAAS,CAAEZ,OAAQ,wEAoEjB,IAAAkB,EAAAD,KACP,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACiD,EAAD,MACAnD,EAAAC,EAAAC,cAACkD,EAAD,CAAQ7C,SAAU0C,KAAKlB,MAAMxB,SAAUD,aAAc2C,KAAKlB,MAAMzB,aAAcD,OAAQ4C,KAAKlB,MAAMC,SACjGhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZ8C,KAAKlB,MAAMG,MAAMmB,IAAI,SAAAC,GAAI,OACxBtD,EAAAC,EAAAC,cAACqD,EAAD,CACEvC,GAAIsC,EAAKtC,GACTI,MAAOkC,EAAKlC,MACZD,cAAe+B,EAAK/B,2BA5FhBqC,aCZEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7c9751f8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst style = {\n  text: {\n    textAlign: \"center\"\n  }\n}\n\nconst NavBar = props => (\n  <header style={style.text} className=\"header\">\n    <nav className=\"gameBar\">\n      <h3 className=\"center\" title=\"Home\">Final Fantasy Clicky-Game!<br />\n        Status: {props.status}<br />\n        Score: {props.currentScore} {\" \"}\n        Top Score: {props.topScore}</h3>\n    </nav>\n  </header>\n)\n\nexport default NavBar;","import React from 'react';\n\nconst style = {\n  logoIcon: {\n    width: 1040,\n    height: 300,\n    justifyContent: \"center\"\n  }\n}\n\nconst Banner = () => (\n  <section className=\"banner\">\n    <img style={style.logoIcon} className='logoIcon' src=\"https://i.ytimg.com/vi/8PV_snTD-Jw/maxresdefault.jpg\" alt=\"banner\"/>\n  </section>\n);\n\nexport default Banner;","import React from 'react';\n\nconst IconCard = props => (\n  <section id={props.id} className=\"iconCard\" value={props.id} onClick={() =>\n  props.clickedPlayer(props.id)\n  }>\n    <section className=\"character\">\n      <img src={props.image} className=\"db\" alt=\"game-char\" />\n    </section>\n  </section>\n)\n\nexport default IconCard;","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Banner from './components/Banner';\nimport IconCard from './components/IconCard';\nimport Icons from './icons.json';\nimport \"./components/IconCard.css\";\n\n\nconst shuffleArray = (array) => {\n  let counter = array.length;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    let index = Math.floor(Math.random() * counter);\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n  return array;\n};\nclass App extends Component {\n\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    result: \"\",\n    clicked: [],\n    Icons,\n    gameOver: false\n  };\n\n  // When the page loads and the component mounts,\n  // display starting message\n  componentDidMount() {\n    this.setState({ result: \"Click any character to get started\" })\n  }\n\n  // When a player gets clicked,\n  // increase points and add id of element to array.\n  clickedPlayer = id => {\n    console.log(`Picture clicked with id: ${id}`);\n    if (!this.state.clicked.includes(id)) {\n      this.pointIncrease();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.resetGame();\n    }\n  }\n\n  // When the user makes a new click, increment the points by 1\n  // and check if the user has won\n  pointIncrease = () => {\n    let score = this.state.currentScore + 1;\n    console.log(`the score is ${score}`);\n    if (score === this.state.Icons.length) {\n      this.setState({\n        result: \"You win! Start clicking to play again!\",\n        topScore: score,\n        currentScore: 0,\n        clicked: [],\n        Icons,\n        gameOver: false\n      });\n    } else if (score > this.state.topScore) {\n      this.setState({\n        topScore: score,\n        currentScore: score,\n        result: \"Correct! New high score!\",\n      });\n    } else {\n      this.setState({\n        currentScore: score,\n        result: \"Correct!\"\n      });\n    }\n    this.resetIconArray();\n  }\n\n  // reset the game when the user chooses a duplicate\n  resetGame = () => {\n    this.setState({\n      points: 0,\n      currentScore: 0,\n      topScore: this.state.topScore,\n      result: \"You Lose!\",\n      clicked: [],\n      Icons,\n      gameOver: true\n    });\n    console.log('Game over? ', this.state.gameOver);\n    this.resetIconArray();\n  }\n\n  // set the array to be mapped to a new scrambled version using shuffle algorithm\n  resetIconArray = () => {\n    let newScramble = shuffleArray(Icons);\n    this.setState({ Icons: newScramble })\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <Banner />\n        <NavBar topScore={this.state.topScore} currentScore={this.state.currentScore} status={this.state.result} />\n        <div className='mainStyle'>\n          {this.state.Icons.map(icon => (\n            <IconCard\n              id={icon.id}\n              image={icon.image}\n              clickedPlayer={this.clickedPlayer}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}